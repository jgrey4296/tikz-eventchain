%% __sty -*- mode: LaTeX -*-
% a lua extension package.
% 
% Provides the environment:
% \eventchain[dir=, dist=, start=]
% which nests :
% \event[name=, dist=]   : env to describe an event
% \fluents[name=, dist=] : env to describe a state

% \state   : a basic state command
% \jumpto  : jump to an arbitrary future state at a time step 
% \addfluent  : for event/fluents env 
% \subfluent  : for event/fluents env
% \keepfluent : for event/fluents env

% Style is manipulated with tikzset styles:
% /eventchain/node
% /eventchain/event/node
% /eventchain/event/box
% /eventchain/state/node
% /eventchain/state/box

% Package ID:
\ProvidesPackage{eventchain}
\NeedsTeXFormat{LaTeX2e}


%-- Options
\SetupKeyvalOptions{
  family=eventchain,
  prefix=eventchain@
  }
\DeclareBoolOption{debug}
\ProcessKeyvalOptions*

%%-- imports
\RequirePackage{iftex}
\RequirePackage{kvoptions}
\RequirePackage{calc}
\RequirePackage{etoolbox}
\RequirePackage{longtable}
\RequirePackage{tikz}
\RequirePackage{environ}
\RequirePackage{ulem}
\RequirePackage{keyval}
\RequirePackage{xparse}
\RequirePackage{cprotect}

\usetikzlibrary{graphdrawing}
\usetikzlibrary{shadows}
\usetikzlibrary{decorations}
\usetikzlibrary{shapes}
\usetikzlibrary{arrows.meta}
\usetikzlibrary{calc}
\usetikzlibrary{fit}
\usetikzlibrary{backgrounds}
\usetikzlibrary{positioning}
\usetikzlibrary{chains}
\usetikzlibrary{scopes}
% \usetikzlibrary{graphs}

%%-- end imports

% Guard to only luatex
\RequireLuaTeX

%-- Variables
% \newlength{\eventchainWidth}
% \setlength{\eventchainWidth}{5cm}


\define@key{eventchain@keys}{dir}{\def\eventchain@dir{#1}}
\define@key{eventchain@keys}{dist}{\def\eventchain@dist{#1}}
\define@key{eventchain@keys}{start}{\def\eventchain@start{#1}}
\define@key{eventchain@keys}{style}{\def\eventchain@style{#1}}

\define@key{event@keys}{name}{\def\event@name{#1}}
\define@key{event@keys}{dist}{\def\event@dist{#1}}
\define@key{event@keys}{fmt}{\def\event@fmt{#1}}
\define@key{event@keys}{cols}{\def\event@cols{#1}}

\define@key{fluents@keys}{name}{\def\fluents@name{#1}}
\define@key{fluents@keys}{dist}{\def\fluents@dist{#1}}
\define@key{fluents@keys}{fmt}{\def\fluents@fmt{#1}}
\define@key{fluents@keys}{cols}{\def\fluents@cols{#1}}

\tikzset{
  /eventchain/node/.style={draw,circle,font=\normalsize},
  /eventchain/event/node/.style={.default=/eventchain/node, fill=blue!20, shape=diamond},
  /eventchain/event/box/.style={-latex, fill=blue!20, shape=rectangle},
  /eventchain/state/node/.style={.default=/eventchain/node, fill=red!21},
  /eventchain/state/box/.style={-latex, fill=red!20, shape=rectangle, rounded corners},
  /eventchain/skip/node/.style={.default=/eventchain/node, draw=none},
}

\directlua{ eventchain = require ("eventchain") }

\providecommand{\debugEventChain}[0]{ % activate debug logging
  \directlua{ eventchain.WRITE_DEBUG = true }
  }

\ifeventchain@debug
  \debugEventChain
\fi
  
\ExplSyntaxOn
% from https://tex.stackexchange.com/questions/48073/
\NewDocumentCommand{\newenvcommand}{ m m } % #1 = env name, #2 = command name
  {
   \cs_if_exist:cF { g_envc_#1_list_tl } { \tl_new:c { g_envc_#1_list_tl } }
   \tl_gput_right:cn { g_envc_#1_list_tl } { #2 }
   \exp_after:wN \newcommand \cs:w envc_#1_\cs_to_str:N #2 \cs_end:
  }
\NewDocumentCommand{\checkenvcommands}{ }
  {
   \cs_if_exist:cT { g_envc_\use:c {@currenvir} _list_tl }
     {
      \tl_map_inline:cn { g_envc_\use:c {@currenvir} _list_tl }
        { \cs_set_eq:Nc ##1 { envc_\use:c {@currenvir} _\cs_to_str:N ##1 } }
     }
  }
\ExplSyntaxOff


%-- Environments
% \NewEnviron{eventchain}[1][]{ 
%   \ignorespaces
%   \checkenvcommands
%   \setkeys{eventchain@keys}{dir=below, dist=1cm, start=-1, #1}
%   % actual output
%   \directlua{
%     current = eventchain:new("\eventchain@dir", "\eventchain@dist")
%     current:open()
%     current:start("\eventchain@start")
%     current:body()
%     current:close()
%     current = nil
%   }
% }

\newenvironment{eventchain}[1][]
{ \ignorespaces
  \checkenvcommands
  \setkeys{eventchain@keys}{dir=below, dist=1cm, start=-1, #1}
  \directlua{
    current = eventchain:new("\eventchain@dir", "\eventchain@dist")
    current:open()
    current:start("\eventchain@start")
  }
}
{
  \directlua{
    current:close()
    current = nil
  }
}

% internal commands
\newenvcommand{eventchain}{\jumpto}[1][nil]{% Insert an Ellipses Node and increment time by [1]
  \directlua{ current:continue("#1") }
}
\newenvcommand{eventchain}{\state}[1][nil]{
  \directlua{ current:node("#1") }
}
\newenvcommand{fluents}{\addfluent}[1]{$ + $ & \texttt{#1} }
\newenvcommand{fluents}{\subfluent}[1]{$ - $ & \sout{\texttt{#1}}}
\newenvcommand{fluents}{\keepfluent}[1]{$ = $ & \texttt{#1}}
\newenvcommand{event}{\addfluent}[1]{$ + $ & \texttt{#1} }
\newenvcommand{event}{\subfluent}[1]{$ - $ & \sout{\texttt{#1}}}
\newenvcommand{event}{\keepfluent}[1]{$ = $ & \texttt{#1}}


% internal environments
\NewEnviron{event}[1][]{
  \checkenvcommands
  %% Insert Event descriptions in between states, and increment the time step
  \setkeys{event@keys}{name=Evc, dist=2cm, fmt=c, cols=1, #1}
  \directlua{ current:event_block("\event@name", "\event@dist", "\event@cols", "\event@fmt", token.get_macro('BODY')) }
}

\NewEnviron{fluents}[1][]{
  \ignorespaces
  \checkenvcommands
  %% Annotate a state with fluent addition,retraction,and continuation
  \setkeys{fluents@keys}{name=Fl, dist=2cm, fmt={c | l}, cols=1, #1}
  \directlua{ current:fluents_block("\fluents@name", "\fluents@dist",  "\fluents@cols", "\fluents@fmt", token.get_macro('BODY')) }
}

\NewEnviron{simpletest}[1][]{
  \ignorespaces
  \checkenvcommands
  \begin{figure}
    \begin{tikzpicture}[start chain=trace going right, node distance=0.5cm and 0.5cm, every node/.style=draw,circle]
      { \node [on chain=trace, join] (test1) {blah}; }
      { \node [on chain=trace, join] (test2) {\BODY}; }
    \end{tikzpicture}
  \end{figure}
}
